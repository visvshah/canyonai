// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(AE)
    orgId         String? 
    org           Org?      @relation(fields: [orgId], references: [id])
    accounts      Account[]
    sessions      Session[]
    quotesCreated Quote[]         @relation("UserCreatedQuotes")
    approvalSteps ApprovalStep[]  @relation("UserApprovalSteps")
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    AE
    DEALDESK
    CRO
    LEGAL
    FINANCE
}

enum PaymentKind {
    NET
    PREPAY
    BOTH
}

enum QuoteStatus {
    Pending
    Approved
    Rejected
    Sold
}

enum ApprovalStatus {
    Waiting
    Pending
    Approved
    Rejected
}

model Org {
    id         String   @id @default(uuid())
    name       String
    createdAt  DateTime @default(now())

    users      User[]
    packages   Package[]
    addOns     AddOn[]
    quotes     Quote[]
}

model Package {
    id          String  @id @default(uuid())
    orgId       String
    org         Org     @relation(fields: [orgId], references: [id])
    name        String
    description String
    unitPrice   Decimal @default(0)

    quotes      Quote[]
}

model AddOn {
    id          String  @id @default(uuid())
    orgId       String
    org         Org     @relation(fields: [orgId], references: [id])
    name        String
    description String?
    unitPrice   Decimal @default(0)

    quotes      Quote[]

    @@unique([orgId, name])
}

model Quote {
    id              String        @id @default(uuid())
    orgId           String
    org             Org           @relation(fields: [orgId], references: [id])
    createdById     String
    createdBy       User          @relation("UserCreatedQuotes", fields: [createdById], references: [id])
    packageId       String
    package         Package       @relation(fields: [packageId], references: [id])
    quantity        Int
    seatCount       Int           @default(0)
    addOns          AddOn[]
    customerName    String
    paymentKind     PaymentKind
    netDays         Int?
    prepayPercent   Decimal?
    subtotal        Decimal
    discountPercent Decimal
    total           Decimal
    documentHtml    String?       @db.Text
    status          QuoteStatus   @default(Pending)
    createdAt       DateTime      @default(now())
    updatedAt       DateTime      @updatedAt

    approvalWorkflow ApprovalWorkflow?
}

model ApprovalWorkflow {
    id        String        @id @default(uuid())
    quoteId   String @unique
    quote     Quote  @relation(fields: [quoteId], references: [id])

    steps     ApprovalStep[]
}

model ApprovalStep {
    id          String          @id @default(uuid())
    approvalWorkflowId String
    approvalWorkflow ApprovalWorkflow @relation(fields: [approvalWorkflowId], references: [id])
    stepOrder   Int
    persona     Role
    approverId  String?
    approver    User?           @relation("UserApprovalSteps", fields: [approverId], references: [id])
    status      ApprovalStatus  @default(Waiting)
    approvedAt  DateTime?
    createdAt   DateTime        @default(now())
    updatedAt   DateTime?
}
